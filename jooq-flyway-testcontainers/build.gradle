plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.30"
    id("org.jetbrains.kotlin.kapt") version "1.4.30"
    id("org.jetbrains.kotlin.plugin.allopen") version "1.4.30"
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.3.3"
    id('nu.studer.jooq') version '5.2'
}

version = "0.1"
group = "com.example"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.example.*")
    }
}

dependencies {
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:postgresql")

//    implementation 'org.jooq:jooq-meta:3.14.7'
//    implementation 'org.jooq:jooq-meta-extensions:3.14.7'

}


application {
    mainClass.set("com.example.ApplicationKt")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

tasks {
    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            jvmTarget = "11"
        }
    }


}

//jooq {
//    version = '3.14.7'  // default (can be omitted)
//    edition = nu.studer.gradle.jooq.JooqEdition.OSS  // default (can be omitted)
//
//    configurations {
//        main {  // name of the jOOQ configuration
//            generateSchemaSourceOnCompilation = true  // default (can be omitted)
//
//            generator {
//                database {
//                    name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
//                    properties {
//                        property {
//                            key = 'scripts'
//                            value = 'src/test/resources/db/migration/**'
//                        }
//                        property {
//                            key = 'sort'
//                            value = 'flyway'
//                        }
//                    }
//                }
//            }
//
//        }
//    }
//}

//myConfigurationName(sourceSets.main) {
//    generator {
//        database {
//            name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
//            properties {
//
//                // Specify the location of your SQL script.
//                // You may use ant-style file matching, e.g. /path/**/to/*.sql
//                //
//                // Where:
//                // - ** matches any directory subtree
//                // - * matches any number of characters in a directory / file name
//                // - ? matches a single character in a directory / file name
//                property {
//                    key = 'scripts'
//                    value = 'src/test/resources/db/migration/**'
//                }
//
//                // The sort order of the scripts within a directory, where:
//                //
//                // - semantic: sorts versions, e.g. v-3.10.0 is after v-3.9.0 (default)
//                // - alphanumeric: sorts strings, e.g. v-3.10.0 is before v-3.9.0
//                // - flyway: sorts files the same way as flyway does
//                // - none: doesn't sort directory contents after fetching them from the directory
//                property {
//                    key = 'sort'
//                    value = 'flyway'
//                }
//
//                // The default schema for unqualified objects:
//                //
//                // - public: all unqualified objects are located in the PUBLIC (upper case) schema
//                // - none: all unqualified objects are located in the default schema (default)
//                //
//                // This configuration can be overridden with the schema mapping feature
//                property {
//                    key = 'unqualifiedSchema'
//                    value = 'none'
//                }
//
//                // The default name case for unquoted objects:
//                //
//                // - as_is: unquoted object names are kept unquoted
//                // - upper: unquoted object names are turned into upper case (most databases)
//                // - lower: unquoted object names are turned into lower case (e.g. PostgreSQL)
//                property {
//                    key = 'defaultNameCase'
//                    value = 'as_is'
//                }
//            }
//        }
//    }
//}

dependencies {
    jooqGenerator 'org.jooq:jooq-meta-extensions'
}
jooq {
    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.WARN
                generator {
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        properties {
                            property {
                                key = 'scripts'
                                value = 'src/test/resources/db/migration/**'
                            }
                            property {
                                key = 'sort'
                                value = 'flyway'
                            }
                        }
                    }
                }
            }
        }
    }
}